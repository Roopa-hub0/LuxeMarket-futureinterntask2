
import React, { useState, useEffect, useCallback } from "react";
import { Product } from "@/entities/Product";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Star, ShoppingCart, Heart, Share2, ArrowLeft, Shield, Truck, RotateCcw } from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Skeleton } from "@/components/ui/skeleton";

export default function ProductDetail() {
  const [product, setProduct] = useState(null);
  const [selectedImage, setSelectedImage] = useState(0);
  const [quantity, setQuantity] = useState(1);
  const [loading, setLoading] = useState(true);

  const urlParams = new URLSearchParams(window.location.search);
  const productId = urlParams.get('id');

  const loadProduct = useCallback(async () => {
    try {
      const data = await Product.filter({ id: productId });
      if (data.length > 0) {
        setProduct(data[0]);
      } else {
        setProduct(null); // Ensure product is null if not found
      }
    } catch (error) {
      console.error('Error loading product:', error);
      setProduct(null); // Set product to null on error
    } finally {
      setLoading(false);
    }
  }, [productId]); // productId is a dependency for loadProduct

  useEffect(() => {
    if (productId) {
      loadProduct();
    } else {
      setLoading(false); // If no productId, stop loading and show not found
    }
  }, [productId, loadProduct]); // loadProduct is now a dependency

  const getCategoryColor = (category) => {
    const colors = {
      furniture: "bg-amber-100 text-amber-800",
      clothes: "bg-purple-100 text-purple-800",
      jewelry: "bg-rose-100 text-rose-800",
      electronics: "bg-blue-100 text-blue-800"
    };
    return colors[category] || "bg-gray-100 text-gray-800";
  };

  const addToCart = () => {
    // Add to cart functionality would go here
    alert(`Added ${quantity} ${product.name} to cart!`);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-white">
        <div className="max-w-7xl mx-auto px-4 py-8">
          <div className="grid lg:grid-cols-2 gap-12">
            <div>
              <Skeleton className="h-96 w-full rounded-2xl mb-4" />
              <div className="flex space-x-2">
                {Array(4).fill(0).map((_, i) => (
                  <Skeleton key={i} className="h-20 w-20 rounded-lg" />
                ))}
              </div>
            </div>
            <div className="space-y-4">
              <Skeleton className="h-8 w-3/4" />
              <Skeleton className="h-6 w-1/2" />
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-10 w-full" />
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-white flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-slate-800 mb-4">Product Not Found</h2>
          <Link to={createPageUrl("Shop")}>
            <Button>Back to Shop</Button>
          </Link>
        </div>
      </div>
    );
  }

  const productImages = product.images?.length > 0 ? product.images : [
    `https://images.unsplash.com/photo-1560472354-b33ff0c44a43?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80`
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-white">
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Breadcrumb */}
        <div className="flex items-center space-x-2 text-sm text-slate-600 mb-8">
          <Link to={createPageUrl("Home")} className="hover:text-slate-800">Home</Link>
          <span>/</span>
          <Link to={createPageUrl("Shop")} className="hover:text-slate-800">Shop</Link>
          <span>/</span>
          <Link to={createPageUrl(`Shop?category=${product.category}`)} className="hover:text-slate-800 capitalize">
            {product.category}
          </Link>
          <span>/</span>
          <span className="text-slate-800 font-medium">{product.name}</span>
        </div>

        {/* Back Button */}
        <div className="mb-8">
          <Link to={createPageUrl("Shop")}>
            <Button variant="outline" className="flex items-center space-x-2">
              <ArrowLeft className="w-4 h-4" />
              <span>Back to Shop</span>
            </Button>
          </Link>
        </div>

        <div className="grid lg:grid-cols-2 gap-12">
          {/* Product Images */}
          <div>
            <div className="relative overflow-hidden rounded-2xl bg-white shadow-lg mb-4">
              <img 
                src={productImages[selectedImage]}
                alt={product.name}
                className="w-full h-96 lg:h-[500px] object-cover"
              />
              {product.original_price && product.original_price > product.price && (
                <div className="absolute top-4 right-4">
                  <Badge className="bg-red-500 text-white text-lg px-3 py-1">
                    -{Math.round(((product.original_price - product.price) / product.original_price) * 100)}% OFF
                  </Badge>
                </div>
              )}
            </div>
            
            {productImages.length > 1 && (
              <div className="flex space-x-2 overflow-x-auto">
                {productImages.map((image, index) => (
                  <button
                    key={index}
                    onClick={() => setSelectedImage(index)}
                    className={`flex-shrink-0 w-20 h-20 rounded-lg overflow-hidden border-2 transition-all ${
                      selectedImage === index ? 'border-slate-800' : 'border-transparent hover:border-slate-300'
                    }`}
                  >
                    <img src={image} alt={`${product.name} ${index + 1}`} className="w-full h-full object-cover" />
                  </button>
                ))}
              </div>
            )}
          </div>

          {/* Product Info */}
          <div>
            <div className="mb-4">
              <Badge className={getCategoryColor(product.category) + " mb-2"}>
                {product.category}
              </Badge>
              {product.brand && (
                <p className="text-sm text-slate-500 font-medium uppercase tracking-wide mb-2">{product.brand}</p>
              )}
              <h1 className="text-3xl lg:text-4xl font-bold text-slate-800 mb-4">{product.name}</h1>
            </div>

            {/* Rating */}
            {product.rating && (
              <div className="flex items-center space-x-2 mb-6">
                <div className="flex">
                  {[...Array(5)].map((_, i) => (
                    <Star 
                      key={i} 
                      className={`w-5 h-5 ${i < Math.floor(product.rating) ? 'text-amber-400 fill-current' : 'text-gray-300'}`}
                    />
                  ))}
                </div>
                <span className="text-slate-600">({product.review_count || 0} reviews)</span>
              </div>
            )}

            {/* Price */}
            <div className="flex items-center space-x-4 mb-6">
              <span className="text-4xl font-bold text-slate-800">${product.price}</span>
              {product.original_price && product.original_price > product.price && (
                <span className="text-2xl text-slate-500 line-through">${product.original_price}</span>
              )}
            </div>

            {/* Description */}
            {product.description && (
              <div className="mb-6">
                <h3 className="text-lg font-semibold text-slate-800 mb-2">Description</h3>
                <p className="text-slate-600 leading-relaxed">{product.description}</p>
              </div>
            )}

            {/* Stock Status */}
            <div className="mb-6">
              {product.in_stock ? (
                <div className="flex items-center space-x-2">
                  <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                  <span className="text-green-600 font-medium">In Stock</span>
                  {product.stock_quantity && (
                    <span className="text-slate-500">({product.stock_quantity} available)</span>
                  )}
                </div>
              ) : (
                <div className="flex items-center space-x-2">
                  <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                  <span className="text-red-600 font-medium">Out of Stock</span>
                </div>
              )}
            </div>

            {/* Quantity & Add to Cart */}
            <div className="space-y-4 mb-8">
              <div className="flex items-center space-x-4">
                <label className="text-sm font-medium text-slate-700">Quantity:</label>
                <div className="flex items-center border border-slate-300 rounded-lg">
                  <button 
                    onClick={() => setQuantity(Math.max(1, quantity - 1))}
                    className="px-3 py-2 hover:bg-slate-50 transition-colors"
                  >
                    -
                  </button>
                  <span className="px-4 py-2 font-medium">{quantity}</span>
                  <button 
                    onClick={() => setQuantity(quantity + 1)}
                    className="px-3 py-2 hover:bg-slate-50 transition-colors"
                  >
                    +
                  </button>
                </div>
              </div>

              <div className="flex space-x-4">
                <Button 
                  size="lg" 
                  className="flex-1 bg-slate-800 hover:bg-slate-700 text-white font-semibold py-3"
                  onClick={addToCart}
                  disabled={!product.in_stock}
                >
                  <ShoppingCart className="w-5 h-5 mr-2" />
                  Add to Cart
                </Button>
                <Button size="lg" variant="outline" className="px-4">
                  <Heart className="w-5 h-5" />
                </Button>
                <Button size="lg" variant="outline" className="px-4">
                  <Share2 className="w-5 h-5" />
                </Button>
              </div>
            </div>

            {/* Trust Badges */}
            <Card className="bg-slate-50 border-0">
              <CardContent className="p-4">
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  <div className="flex items-center space-x-2">
                    <Shield className="w-5 h-5 text-green-600" />
                    <div>
                      <p className="text-sm font-medium text-slate-800">Secure Payment</p>
                      <p className="text-xs text-slate-500">SSL Protected</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Truck className="w-5 h-5 text-blue-600" />
                    <div>
                      <p className="text-sm font-medium text-slate-800">Free Shipping</p>
                      <p className="text-xs text-slate-500">Orders over $50</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RotateCcw className="w-5 h-5 text-purple-600" />
                    <div>
                      <p className="text-sm font-medium text-slate-800">Easy Returns</p>
                      <p className="text-xs text-slate-500">30 day policy</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Specifications */}
            {product.specifications && Object.keys(product.specifications).length > 0 && (
              <div className="mt-8">
                <h3 className="text-lg font-semibold text-slate-800 mb-4">Specifications</h3>
                <div className="bg-white rounded-lg border border-slate-200 p-4">
                  {Object.entries(product.specifications).map(([key, value], index) => (
                    <div key={key}>
                      <div className="flex justify-between py-2">
                        <span className="text-slate-600 capitalize">{key.replace(/_/g, ' ')}</span>
                        <span className="text-slate-800 font-medium">{String(value)}</span>
                      </div>
                      {index < Object.entries(product.specifications).length - 1 && (
                        <Separator />
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
